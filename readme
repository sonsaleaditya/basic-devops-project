---

# Project Setup: Dockerized Backend and Frontend

This project demonstrates a simple full-stack web application with **frontend** and **backend** services running in **Docker containers**. The backend is built using **Node.js** and **Express**, while the frontend is built with **React**.

## Table of Contents

- [Prerequisites](#prerequisites)
- [Setup Instructions](#setup-instructions)
  - [Backend Setup](#backend-setup)
  - [Frontend Setup](#frontend-setup)
- [Running the Application](#running-the-application)
- [Environment Variables](#environment-variables)
- [Accessing the Applications](#accessing-the-applications)
- [Cleanup](#cleanup)
- [Troubleshooting](#troubleshooting)

---

## **Prerequisites**

Before getting started, ensure you have the following installed:

- **Docker**: [Download and install Docker](https://www.docker.com/products/docker-desktop).
- **Docker Compose** (Optional, for complex setups): [Docker Compose installation guide](https://docs.docker.com/compose/install/).

---

## **Setup Instructions**

Follow these steps to set up both the backend and frontend of the application in Docker containers.

### **Backend Setup**

1. **Build the Backend Docker Image**:

   Navigate to the **backend directory** (where the `Dockerfile` for the backend is located):
   ```bash
   docker build -t server .
   ```

2. **Run the Backend Docker Container**:

   Run the Docker container for the backend service:
   ```bash
   docker run -it -p 5000:5000 --network basic --env-file .env --name server server
   ```

   - This command will start the backend API server and expose it on port `5000`.

### **Frontend Setup**

1. **Build the Frontend Docker Image**:

   Navigate to the **frontend directory** (where the `Dockerfile` for the React app is located):
   ```bash
   docker build -t client .
   ```

2. **Run the Frontend Docker Container**:

   Run the Docker container for the frontend service:
   ```bash
   docker run -it -p 3000:80 --network basic --name client client
   ```

   - This will start the frontend React app and expose it on port `3000`.

---

## **Running the Application**

### **Set Up the Docker Network (Optional)**

If the Docker network `basic` does not already exist, create it using:
```bash
docker network create basic
```

This command ensures that both the frontend and backend containers can communicate with each other.

### **Accessing the Applications**

1. **Backend API**:  
   After running the backend container, you can access the API at:
   - `http://localhost:5000` (on your host machine)
   - `http://server:5000` (within Docker network)

2. **Frontend Application**:  
   After running the frontend container, you can access the React application at:
   - `http://localhost:3000`

---

## **Environment Variables**

### Backend (`.env` file for the server):
```env
MONGO_URI=mongodb://mongo:27017/mydatabase
PORT=5000
```
Place this `.env` file in your **backend project directory**. It contains environment variables, such as the MongoDB URI and the port the server will run on.

### Frontend (`.env` file for the client):
```env
VITE_API_BASE_URL=http://server:5000
```
Place this `.env` file in your **frontend project directory**. It defines the base URL for API requests, where `server:5000` points to the backend container in the Docker network.

---

## **Cleanup**

To stop and remove the containers and images:

### Stop the Containers:
```bash
docker stop server client
```

### Remove the Containers:
```bash
docker rm server client
```

### Remove the Docker Images:
```bash
docker rmi server client
```

This will remove the running containers and images from your system.

---

## **Troubleshooting**

- **Proxy Configuration Issue**: If the frontend is not able to connect to the backend, ensure that both containers are on the same Docker network (`basic`) and that the frontend uses the correct API URL (`VITE_API_BASE_URL` in `.env`).
  
- **API Not Accessible**: If you're unable to access the backend API, make sure the backend container is running and listening on port `5000`. Check the Docker logs for more information:
  ```bash
  docker logs server
  ```

- **CORS Issues**: If you experience CORS issues while making requests from the frontend, ensure your backend server has appropriate CORS headers set.

---
